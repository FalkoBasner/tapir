// Code generated by protoc-gen-go-grpc. DO NOT EDIT.

package core

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// ArticleServiceClient is the client API for ArticleService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type ArticleServiceClient interface {
	//* Returns a core article by it's id
	//
	//############################################################################
	//# Status/Error scenario's
	//############################################################################
	//
	//scenario: found
	//description: article was found in the datastore and is published according to it's metadata
	//gRPC status: OK
	//gRPC error payload: none
	//HTTP status: OK
	//cacheable: yes
	//
	//scenario: invalid id
	//description: article id is invalid
	//gRPC status: INVALID_ARGUMENT
	//gRPC error payload: google.rpc.BadRequest
	//HTTP status: 400
	//cacheable: yes
	//
	//scenario: not found
	//description: article was not found in the datastore
	//gRPC status: NOT_FOUND
	//gRPC error payload: google.rpc.ResourceInfo
	//HTTP status: 404
	//cacheable: yes
	//
	//scenario: not published yet
	//description: article was found in the datastore but according to it's metadata the article is not published yet
	//gRPC status: NOT_FOUND
	//gRPC error payload: google.rpc.ResourceInfo with info about the 'start_time'
	//HTTP status: 404
	//cacheable: yes
	//
	//scenario: expired
	//description: article was found in the datastore but is expired according to it's metadata
	//gRPC status: NOT_FOUND
	//gRPC error payload: google.rpc.ResourceInfo with info about the 'end_time'
	//HTTP status: 404
	//cacheable: yes
	//
	//scenario: deleted/archived
	//description: article was found in the datastore but it's state is marked as deleted/archived
	//gRPC status: FAILED_PRECONDITION
	//gRPC error payload: google.rpc.PreconditionFailure with info about the state
	//HTTP status: 410
	//cacheable: yes
	//
	//scenario: internal
	//description: internal error processing the article
	//gRPC status: INTERNAL
	//gRPC error payload: none
	//HTTP status: 500
	//cacheable: no
	//
	//scenario: timeout
	//description: timeout loading and processing the article
	//gRPC status: DEADLINE_EXCEEDED
	//gRPC error payload: none
	//HTTP status: 504
	//cacheable: no
	//
	//*Redirect cases should be defined after requirements are clear**
	//
	GetArticle(ctx context.Context, in *GetArticleRequest, opts ...grpc.CallOption) (*Article, error)
}

type articleServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewArticleServiceClient(cc grpc.ClientConnInterface) ArticleServiceClient {
	return &articleServiceClient{cc}
}

func (c *articleServiceClient) GetArticle(ctx context.Context, in *GetArticleRequest, opts ...grpc.CallOption) (*Article, error) {
	out := new(Article)
	err := c.cc.Invoke(ctx, "/stroeer.core.v1.ArticleService/GetArticle", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// ArticleServiceServer is the server API for ArticleService service.
// All implementations must embed UnimplementedArticleServiceServer
// for forward compatibility
type ArticleServiceServer interface {
	//* Returns a core article by it's id
	//
	//############################################################################
	//# Status/Error scenario's
	//############################################################################
	//
	//scenario: found
	//description: article was found in the datastore and is published according to it's metadata
	//gRPC status: OK
	//gRPC error payload: none
	//HTTP status: OK
	//cacheable: yes
	//
	//scenario: invalid id
	//description: article id is invalid
	//gRPC status: INVALID_ARGUMENT
	//gRPC error payload: google.rpc.BadRequest
	//HTTP status: 400
	//cacheable: yes
	//
	//scenario: not found
	//description: article was not found in the datastore
	//gRPC status: NOT_FOUND
	//gRPC error payload: google.rpc.ResourceInfo
	//HTTP status: 404
	//cacheable: yes
	//
	//scenario: not published yet
	//description: article was found in the datastore but according to it's metadata the article is not published yet
	//gRPC status: NOT_FOUND
	//gRPC error payload: google.rpc.ResourceInfo with info about the 'start_time'
	//HTTP status: 404
	//cacheable: yes
	//
	//scenario: expired
	//description: article was found in the datastore but is expired according to it's metadata
	//gRPC status: NOT_FOUND
	//gRPC error payload: google.rpc.ResourceInfo with info about the 'end_time'
	//HTTP status: 404
	//cacheable: yes
	//
	//scenario: deleted/archived
	//description: article was found in the datastore but it's state is marked as deleted/archived
	//gRPC status: FAILED_PRECONDITION
	//gRPC error payload: google.rpc.PreconditionFailure with info about the state
	//HTTP status: 410
	//cacheable: yes
	//
	//scenario: internal
	//description: internal error processing the article
	//gRPC status: INTERNAL
	//gRPC error payload: none
	//HTTP status: 500
	//cacheable: no
	//
	//scenario: timeout
	//description: timeout loading and processing the article
	//gRPC status: DEADLINE_EXCEEDED
	//gRPC error payload: none
	//HTTP status: 504
	//cacheable: no
	//
	//*Redirect cases should be defined after requirements are clear**
	//
	GetArticle(context.Context, *GetArticleRequest) (*Article, error)
	mustEmbedUnimplementedArticleServiceServer()
}

// UnimplementedArticleServiceServer must be embedded to have forward compatible implementations.
type UnimplementedArticleServiceServer struct {
}

func (UnimplementedArticleServiceServer) GetArticle(context.Context, *GetArticleRequest) (*Article, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetArticle not implemented")
}
func (UnimplementedArticleServiceServer) mustEmbedUnimplementedArticleServiceServer() {}

// UnsafeArticleServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to ArticleServiceServer will
// result in compilation errors.
type UnsafeArticleServiceServer interface {
	mustEmbedUnimplementedArticleServiceServer()
}

func RegisterArticleServiceServer(s grpc.ServiceRegistrar, srv ArticleServiceServer) {
	s.RegisterService(&ArticleService_ServiceDesc, srv)
}

func _ArticleService_GetArticle_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetArticleRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ArticleServiceServer).GetArticle(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/stroeer.core.v1.ArticleService/GetArticle",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ArticleServiceServer).GetArticle(ctx, req.(*GetArticleRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// ArticleService_ServiceDesc is the grpc.ServiceDesc for ArticleService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var ArticleService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "stroeer.core.v1.ArticleService",
	HandlerType: (*ArticleServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetArticle",
			Handler:    _ArticleService_GetArticle_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "stroeer/core/v1/core_article_service.proto",
}
