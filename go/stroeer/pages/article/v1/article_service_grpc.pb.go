// Code generated by protoc-gen-go-grpc. DO NOT EDIT.

package article

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion7

// ArticlePageServiceClient is the client API for ArticlePageService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type ArticlePageServiceClient interface {
	GetArticlePage(ctx context.Context, in *GetArticlePageRequest, opts ...grpc.CallOption) (*GetArticlePageResponse, error)
}

type articlePageServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewArticlePageServiceClient(cc grpc.ClientConnInterface) ArticlePageServiceClient {
	return &articlePageServiceClient{cc}
}

var articlePageServiceGetArticlePageStreamDesc = &grpc.StreamDesc{
	StreamName: "GetArticlePage",
}

func (c *articlePageServiceClient) GetArticlePage(ctx context.Context, in *GetArticlePageRequest, opts ...grpc.CallOption) (*GetArticlePageResponse, error) {
	out := new(GetArticlePageResponse)
	err := c.cc.Invoke(ctx, "/stroeer.pages.article.v1.ArticlePageService/GetArticlePage", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// ArticlePageServiceService is the service API for ArticlePageService service.
// Fields should be assigned to their respective handler implementations only before
// RegisterArticlePageServiceService is called.  Any unassigned fields will result in the
// handler for that method returning an Unimplemented error.
type ArticlePageServiceService struct {
	GetArticlePage func(context.Context, *GetArticlePageRequest) (*GetArticlePageResponse, error)
}

func (s *ArticlePageServiceService) getArticlePage(_ interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	if s.GetArticlePage == nil {
		return nil, status.Errorf(codes.Unimplemented, "method GetArticlePage not implemented")
	}
	in := new(GetArticlePageRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return s.GetArticlePage(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     s,
		FullMethod: "/stroeer.pages.article.v1.ArticlePageService/GetArticlePage",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return s.GetArticlePage(ctx, req.(*GetArticlePageRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// RegisterArticlePageServiceService registers a service implementation with a gRPC server.
func RegisterArticlePageServiceService(s grpc.ServiceRegistrar, srv *ArticlePageServiceService) {
	sd := grpc.ServiceDesc{
		ServiceName: "stroeer.pages.article.v1.ArticlePageService",
		Methods: []grpc.MethodDesc{
			{
				MethodName: "GetArticlePage",
				Handler:    srv.getArticlePage,
			},
		},
		Streams:  []grpc.StreamDesc{},
		Metadata: "stroeer/pages/article/v1/article_service.proto",
	}

	s.RegisterService(&sd, nil)
}

// NewArticlePageServiceService creates a new ArticlePageServiceService containing the
// implemented methods of the ArticlePageService service in s.  Any unimplemented
// methods will result in the gRPC server returning an UNIMPLEMENTED status to the client.
// This includes situations where the method handler is misspelled or has the wrong
// signature.  For this reason, this function should be used with great care and
// is not recommended to be used by most users.
func NewArticlePageServiceService(s interface{}) *ArticlePageServiceService {
	ns := &ArticlePageServiceService{}
	if h, ok := s.(interface {
		GetArticlePage(context.Context, *GetArticlePageRequest) (*GetArticlePageResponse, error)
	}); ok {
		ns.GetArticlePage = h.GetArticlePage
	}
	return ns
}

// UnstableArticlePageServiceService is the service API for ArticlePageService service.
// New methods may be added to this interface if they are added to the service
// definition, which is not a backward-compatible change.  For this reason,
// use of this type is not recommended.
type UnstableArticlePageServiceService interface {
	GetArticlePage(context.Context, *GetArticlePageRequest) (*GetArticlePageResponse, error)
}
